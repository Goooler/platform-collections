import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType

buildscript {
	dependencies {
		classpath libs.kotlin.gradlePlugin
		classpath libs.dokka.gradlePlugin
	}
	repositories {
		mavenCentral()
	}
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.dokka'

kotlin {
	explicitApi()

	androidNativeArm32()
	androidNativeArm64()
	androidNativeX64()
	androidNativeX86()

	iosArm32()
	iosArm64()
	iosSimulatorArm64()
	iosX64()

	linuxArm32Hfp()
	linuxArm64()
	linuxX64()

	macosArm64()
	macosX64()

	mingwX64()
	mingwX86()

	js {
		nodejs()
	}

	jvm()

	tvosArm64()
	tvosSimulatorArm64()
	tvosX64()

	wasm32()

	watchosArm32()
	watchosArm64()
	watchosDeviceArm64()
	watchosSimulatorArm64()
	watchosX64()
	watchosX86()

	sourceSets {
		commonTest {
			dependencies {
				implementation libs.kotlin.test
			}
		}

		// Implementations using regular kotlinx.collection types.
		collectionsMain {}
		// Implementations using Foundation.
		darwinMain {}
	}

	targets.configureEach { target ->
		if (target.platformType == KotlinPlatformType.native) {
			if (target.name.contains('os')) {
				target.compilations.main.source(sourceSets.darwinMain)
			} else {
				target.compilations.main.source(sourceSets.collectionsMain)
			}
		}
	}

	targets.withType(KotlinNativeTargetWithTests).configureEach {
		binaries {
			// Add a test binary and execution for native targets which runs on a background thread.
			test('background', [NativeBuildType.DEBUG]) {
				freeCompilerArgs += [
					"-trw"
				]
			}
			// Add a test binary and execution for native targets but in release mode.
			test([NativeBuildType.RELEASE])
		}
		testRuns {
			background {
				setExecutionSourceFrom(binaries.getByName("backgroundDebugTest"))
			}
			release {
				setExecutionSourceFrom(binaries.getByName("releaseTest"))
			}
		}
	}
}

repositories {
	mavenCentral()
}
